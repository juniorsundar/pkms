@document.meta
title: 17 February 2024
description: 
authors: juniorsundar-unikie
categories: 
created: 2024-01-29T11:08:22+0400
updated: 2024-02-18T14:12:13+0400
version: 1.1.1
@end

* To-Do

** Work

   - (-) Flash custom firmware into Saluki V2
      -- (-) Flash faulty-firmware and set up HiTL
      -- ( ) Test
   - ( ) Discuss how to implement the fault injection functionality in dronsole
   - (-) Meeting with Siva
      -- ( ) Hold meeting
   - (-) 22nd February, PPT slides CalTech syncup
      -- (x) Get few PPT slides ready
      -- (-) Trim PPT
      -- ( ) Prepare script
   - ( ) 23rd February, Share Objectives (meet | exceed | percentage)

** Personal


   ===
___

* Thoughts

** Explaining Rust, C++ and Go

*** Concurrency (C++ and Go)

    Consider a fantasy kitchen where multiple chefs are to work in tandem. You
    have two chefs, one who has years of experience working as a line cook, and
    another who only does personal cooking. Piles of orders are coming in, and
    you need to get the food out post-haste.

    The line cook can handle multiple orders at once. But the personal chef has
    to probably sit down and work through them in strides. He needs to plan out
    how to approach the problem.

    This is the difference between C++ and Go. The line cook is Go, who comes
    with features of concurrency out of the box. But in C++, there are a lot of
    boiler plate stuff you need to keep in mind.

*** Borrow Checker (C++ and Rust)

    In a kitchen, the equipment is owned by the owner of the kitchen.

    Let's say that a chef is using the spatula in the kitchen. They say that
    the chef owns this spatula. In case someone has to use this spatula, they
    can call on chef. Alternatively, they can also take the spatula from the
    chef, in which case they become the owners of the spatula. Now, if the
    owner of the kitchen were to come in and ask the first chef to return the
    spatula, they cannot as they don't own it anymore. This is the null-pointer
    exception.

    Alternatively, let's apply a stricter rule, then. What if the owner of the
    spatula must be responsible for where the spatula is at all times. So if
    someone was to use it, they let them borrow the spatula, which will return
    to the owner once the spatula's use is over. This way, if the kitchen owner
    comes one day asks for the spatula, the chef will know where it will be.

    ===
___


===
___

{:$/2024/02/16:}[< previous] - {:$/index:}[index] - {:$/2024/02/18:}[next >]
