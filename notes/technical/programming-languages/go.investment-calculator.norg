@document.meta
title: Investment Calculator
description: 
authors: juniorsundar
categories: 
created: 2024-02-04T19:31:34+0400
updated: 2024-02-04T19:41:27+0400
version: 1.1.1
@end

@code gomod
module example.com/investment-calculator

go 1.21.6
@end

@code go
// investment_calculator.go

package main

import (
	"fmt"
	"math"
)

func main() {
	//! Go can automatically infer the type.
	// investmentAmount := 1000

	//! It is also possible to declare a type.
	// var investmentAmount float64 = 1000

    //! Instatiate the variable and can edit it later
    var investmentAmount float64

	//! It is possible to declare multiple variables in one go
	// var investmentAmount, years float64 = 1000, 10
	// investmentAmount, years := 1000.0, 10.0
	// investmentAmount, years, expectedReturnRate := 1000.0, 10.0, 5.5

	//! In some cases it is also possible to define variables of different types
	// var investmentAmount, years = 1000, "10"

	var expectedReturnRate float64 = 5.5

	// float64 := 10
	var years float64 = 10

	//! Constants can be declared with const keyword
	const inflationRate float64 = 2.5

    fmt.Print("Investment Amount: ")
    //! Need to pass pointers for fmt.Scan
    fmt.Scan(&investmentAmount)

    fmt.Print("Expected Return Rate: ")
    fmt.Scan(&expectedReturnRate)

    fmt.Print("Investment Horizon: ")
    fmt.Scan(&years)

	//! Can convert variables between data types with a wrap float64() or int()
	// futureValue := float64(investmentAmount) * math.Pow(1+expectedReturnRate/100, float64(years))
	var futureValue float64 = investmentAmount * math.Pow(1+expectedReturnRate/100, years)

	var futureRealValue float64 = futureValue / math.Pow(1+inflationRate/100, years)

    fmt.Println("Future value before inflation:", futureValue)
    fmt.Println("Future value after inflation:", futureRealValue)
}
@end

   ===
___

{:$/technical/programming-languages/go:}[< return] - {:$/index:}[index]
