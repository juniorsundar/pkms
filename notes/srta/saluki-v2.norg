@document.meta
title: Saluki V2
description: 
authors: juniorsundar-unikie
categories: 
created: 2024-02-13T14:43:07+0400
updated: 2024-02-13T21:06:06+0400
version: 1.1.1
@end

* Secure Boot - Programming FPGA Image and Flashing Bootloader and Firmware

** Programming FPGA Image

*** Requirements

    - {https://ww1.microchip.com/downloads/secure/aemdocuments/documents/fpga/media-content/fpga/v2023-1/program_debug_v2023.1_lin.zip}[FPExpress]
    - FlashPro Programmer V5 or V6
    - Saluki V2 with SysCon Adapter 2 with PolarFire JTAG Connector (ribbon
      cable as well)

*** Process

    - Run FPExpress as superuser

    @code bash
    # Assume installation is at default location
    sudo ./usr/local/microchip/Program_Debug_v2023.1/Program_Debug_Tool/bin/FPExpress
    @end 

    - /Project → New Job Project/
    - /Import FlashPro Express job file → Browse.../
    - Find and select the "MPFS_ICICLE_KIT_BASE_DESIGN.job" file to "zeroize"
      the FPGA
    - Select a /FlashPro Express job project location/ where the log files will
      be dumped. *NOTE* must be an empty folder.
    - In dropdown, select 'ZEROIZE_LIKE_NEW'
    - Click "RUN"

    - Conduct above steps again for the following two jobs:
       -- "enable_user_key.job"
       -- "full_build_uek1.job"
    - Select 'PROGRAM' in dropdown for both

    This will basically prepare bootloader as well and prepare the Saluki for
    the keys to unlock it.

** Certifying with Keys

*** Requirements

    - cert_tool.py
    - default_rdcert.json
    - ed2551_sign.py
    - px4_bin_ed25519_private.pem

*** Process

    - `cd` into the folder all the files above. Ensure that the Saluki V2 is
      connected through USB.
    - Run:

    @code bash
    python3 -m pip install cryptography
    @end

    - Then run:

    @code bash
    python3 cert_tool.py px4_bin_ed25519_private.pem
    @end

    - If successful, then the Saluki V2 will be mounted as USB device with 3
      partitions.

** Flashing Firmware

*** Requirements

    - ssrc_saluki-v2_custom_keys.px4
    - px_uploader.py

*** Process

    - Basically, we can only flash this pre-built firmware since it is
      compatible with the secure keys.
    - `cd` into the directory with the above two files.
    - Run:

    @code bash
    python3 px_uploader.py ssrc_saluki-v2_custom_keys.px4
    @end

    - If successful, then the Saluki V2 can be worked as a regular Pixhawk.

    ===
___

{:$/srta/index:}[< return] -  {:$/index:}[index]
