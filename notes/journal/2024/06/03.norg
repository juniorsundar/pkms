@document.meta
title: 3 June 2024
description: 
authors: juniorsundar
categories: 
created: 2024-01-29T11:08:22+0400
updated: 2024-06-03T22:11:22+0400
version: 1.1.1
@end

* To-Do

** (-) {:$/journal/task-box/q2-june-demo:}[Q2 June Demo]

** (-) {:$/journal/task-box/data-generation-task:}[Data Generation Task]

** (-) {:$/journal/task-box/caltech-tii-collaboration:}[Caltech-TII Collaboration]

** ( ) Swarm simulation
*** ( ) Obtain Documentation to set up swarm from Wang Haoran
*** ( ) Research into UAV Decentralised Swarm implementations
*** ( ) Search around in ARRC for work being done in decentralised control

** (x) Check out whether F4F has UGV that we can use
   - {https://global.agilex.ai/products/scout-mini}[Scout Mini] -> @F4F
   - {https://global.agilex.ai/products/bunker}[Bunker] and {https://global.agilex.ai/products/bunker-mini}[Bunker mini] -> @AD and @F4F

   ===
___

* Journal

  - {** Check out whether F4F has UGV that we can use}[It isn't really necessary to use a UGV], since it was told by Rahul that it is
    best to rely on the system that is being worked on rather than building for
    something new altogether.

  - Response from Andres Garrido about status of drone flights:
  > Hey Junior, I am not sure if you know that there are some issues with the
  > van and the generator so we cant go with the van to Rimah. Also we cant
  > with the bus because the driver is not available. But I connected the drone
  > now, and I can see on tailscale, in the FMO as well but I can read the
  > battery voltage and the camera is not showing the image. Jose is gonna work
  > with this after some flights with the other M690b that its working. 

  - Asked Moamen Ibrahim about `mission-data-recorder` as a default:
  > Hello Junior, sure, In fog_system it is there by default but it doesnâ€™t
  > record anything. In sim_system is by default in data-recording branch but
  > not others. In the emulation I think it is not by default.

  - Samridha needed a method to obtain rosbag files from the test flights at
    F4F. --> {:$/journal/task-box/data-generation-task:** Create a script that converts `.ulog` to rosbag format}[Task]

    ===
___

* Meetings

** Xiao Tan / Junior Sundar -- Q&A

*** Attendees

    | Xiao Tan
    | Junior Sundar

*** Goals

    Clarity on the work being done

*** Agenda

    - Clarify the matrix dimensions
    - Follow up on progress

*** Minutes

**** Questions

     - (x) Is the following 1D sensor case feasible:
     @code cpp
     std::vector<double> sensor_vector{static_cast<double>(ekf_1.x),
         static_cast<double>(ekf_1.vx),
         static_cast<double>(ekf_2.x),
         static_cast<double>(ekf_2.vx)};
     @end

     - (x) Verify {:$/journal/task-box/caltech-tii-collaboration:* 1D Drone System}[1D Drone System]

     - (x) Clarify function of `nchoosek`.

     - (x) Are we essentially overwriting the `O_Gamma` and `Y_Gamma` in `secure_state_estimator.m`?
     @code MATLAB
     for i = 1:size(comb,1)
         % prepare all matrices
         Gamma = comb(i,:);
         O_Gamma = zeros((p-s)*n,n);
         Y_Gamma = zeros((p-s)*n,1);

         for j = 1:size(Gamma,2)
             sensor_ind = Gamma(j);
             O = Oi_cell{sensor_ind};
             Y_tilde = y_vec(sensor_ind,t-n+1:t);
             O_Gamma(n*(j-1)+1:n*j,:) = O;  %% THIS PART IN PARTICULAR
             Y = Y_tilde' - Fi_cell{sensor_ind}*reshape(u_vec(:,t-n+1:t),[],1);
             Y_Gamma(n*(j-1)+1:n*j,1) = Y;
         end
         % least square solution
         % suppress warning
         warning('off', 'MATLAB:rankDeficientMatrix')
         x0_gamma = O_Gamma\Y_Gamma;

         % threshold compare
         if norm(Y_Gamma - O_Gamma*x0_gamma)>0.001
             % disp(['No initial state for sensors ' num2str(Gamma) '!']);  
         % disp(['fitting error->' num2str(norm(Y_Gamma - O_Gamma*x0_gamma)) ', fail to convince'])
         else
             % disp(['Found initial state for sensors ' num2str(Gamma) ' at time ' num2str(t) '!']);
         % disp('The possible x0 is ')
         % disp(num2str(x0_gamma))
             Gamma_set_new(end+1,:) = Gamma;

             if rank(O_Gamma)<n
                 % null space
                 A_gamma = null(O_Gamma,1e-4);
             else
                 A_gamma = 0;
             end

             x0_prob.x0 = x0_gamma;
             x0_prob.A_gamma = A_gamma;
             x0_prob.Gamma = Gamma;
             X0_cell{end+1} = x0_prob;
         end
     end
     @end

     - (x) Clarify this chunk of code in `secure_state_estimator.m`:
     @code MATLAB
     % now check if subspac:kernal of O_G must be a subset of kernal of HA^t
     if norm(A_x0)>0.1
         for j = 1:size(A_x0,2)
             M = [H; H*A; H*A^2; H*A^3]*A_x0(:,j);
             if norm(M)>=0.0001
                 error(['possible subspace ' num2str(A_x0(:,j)') ' is not in safe set']);
             end
         end

         A_xt(:,j) = H*A^3*A_x0(:,j);
     end
     @end

**** Responses

     Assume at most how many sensors are being attacked (this is a prerequisite)!!

     As for input vectors:
     - First open-loop
     - Second closed-loop --> Assume that a sensor is "trustworthy" -> In what
       sense? Doesn't really matter because we can guarantee stability.
     - Maybe we can use ML to identify attacked sensor to place trustworthy
       label.

     What could go wrong with this implementation:
     - measurement from EKF may not be accurate.
     - model is very simple, may not be the true model, tuning may be required here.

*** Action Items

    - {:$/journal/task-box/caltech-tii-collaboration:** Create GitHub repository and add `xiaotan-git` to it}[Create GitHub repository and add `xiaotan-git` to it]

    ===
___

{:$/journal/2024/06/02:}[< previous] - {:$/journal/index:}[index] - {:$/journal/2024/06/04:}[next >]


