@document.meta
title: 26 April 2024
description: 
authors: juniorsundar
categories: 
created: 2024-01-29T11:08:22+0400
updated: 2024-04-26T16:17:07+0400
version: 1.1.1
@end

* To-Do

** (-) Data collection from testing team follow-up --> Awaiting Tintu's go-ahead 

** (-) Q2 June Demo
*** (x) Which camera is being used for this
    - Forward: {https://shop.luxonis.com/products/oak-d-s2?variant=42455432233183}[Luxonis OAK-D S2]
      This has been tested with Release12
    - Downward: {https://shop.siyi.biz/products/siyi-a8-mini}[SIYI A8 Mini]
      This is the model being used in Masdar and in F4F Prague

*** (x) How is the data being recorded?
**** (x) It is known that the data is being dumped in ROSbags somewhere, how to extract this?
     It can be recorded using {https://github.com/tiiuae/nats-bag}[`nats-bag`]

     A laptop or GCS that is in the same NATS network can record the data
     streamed through NATS.

     @code bash
     nats-bag [-s nats://localhost:4222] record [filename]
     @end

**** (x) Is recording happening continuously or is it to be triggered?
     The gimbal stream needs to be activated by opening the stream through
     `dronsole` UI or running:

     @code bash
     nats pub video.cmd.<device-id> '{"subscriber": "id1", "subscribe":true}'
     @end

*** (-) Verify if this method can be used to record data in the outdoor arena demo -- talk to Jose Segovia
*** (-) Confirm if Siyi A8 is supported for Release12
*** (x) Create Slack channel with all concerned parties
*** (x) Fill up the hardware requirements spreadsheet

** (-) {:$/journal/task-box/data-generation-task:}[Data Generation Task]

** (-) {:$/journal/task-box/caltech-tii-collaboration:}[Caltech-TII Collaboration]

  ===
___

* Journal

  ===
___

* Meetings

** Worker Supervisor Meeting

*** Attendees

    | Solita
    | Unikie Finland
    | Junior Sundar

*** Minutes

    Use NATS itself to handle the workers

    Worker supervisor handles active/launched workers

    It will also handle starting+killing of containers

    Supervisor should know from fog-hyper
    - Container status
    - Manage containers --> May need to deactivate docker default relaunch

    Is there some changes needed from how manual kill switch interacts with
    fog-navigation?
    - Take over => Action aborted at the moment

    fog-navigation has fastest access to information from the PX4

    Worker supervisor will support ROS 2 messaging
    - Build diagnostic topic from current navigation status etc.

    In simulation
    - fog-navigation -> PX4 -> *CRASH* -> Relaunch --> Old mission persists -|
    - This problem only seems to affect fixed wings and VTOLs
    - Network isolation between devices:
       -- Instead of restarting container --> kill processes that are in the
          entrypoints for container.
       -- Like microsupervisors inside containers
       -- "sounds too hacky"

*** Action Items

    Where does SRTA fall in this supervisor?
    - There is some interaction wrt handoff of controls
    - More discussion on this is necessary

    A basic mission-worker template needs to be built for others to build on
    top of this worker supervisor framework

    ===
___

{:$/journal/2024/04/25:}[< previous] - {:$/journal/index:}[index] - {:$/journal/2024/04/27:}[next >]

