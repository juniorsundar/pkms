@document.meta
title: 5 March 2024
description: 
authors: juniorsundar
categories: 
created: 2024-01-29T11:08:22+0400
updated: 2024-03-05T13:34:11+0400
version: 1.1.1
@end

* To-Do

** (x) Flash custom firmware into Saluki V2

   Found to be successful.

** (-) HITL simulation and data collection for system latency

*** (x) Syncup with Yashrajsinh to hash out requirements of the HITL simulation

    - Drone is running
       -- In Hover mode
       -- Take one test in Path mode
    - Recording topics (refer to PPT)
       -- Timestamped and only pertinent data required
    - Fault activation
       -- All 5 sensors
       -- $-\infty$ to 0 to $+\infty$ 
    - Run till failure or set time point
       -- Failure defined by crash, sudden landing, out of bounds
       -- Out of bounds in 2 levels: unacceptable, and failure (1m, 5m)
    - Dump data for analysis

*** (-) Trigger and be able to observe the faults in HITL

    The modules in SITL and HITL are quite different when considering anything
    apart from the IMU. Directly porting the SITL into HITL did not work,
    because the GPS, Magnetometer and Barometer are in different source
    modules.

    Wasn't able to find these modules. I've tried editing the drivers as well,
    but it seems that in HITL, the values being published and observed through
    the ros2 topics aren't reflecting the faults being injected. To expand on
    this, when addingsome type of fault like setting all values of a particular
    sensor to zero, only the resulting deviation is observed in the ros2
    topics. The values aren't actually getting fully set to zero.

*** (-) Set up automated simulation and data collection pipeline

    *RO2 Node Architecture*

    Keep the `drone_controller.py` node for param setting and drone launching.

    Update the `drone_state_monitor.py` node to ensure system remains within
    limits.

    -Need to edit the `fault_manager.py` such that it triggers a fault after a-
    -fixed interval given the sensor that needs to be faulted and the type of-
    -fault it needs to experience:-
    - -All zeros-
    - -All max-

    Due to the straightforward nature of this process, we can bundle up the
    fault activation AND the iteration management into `iteration_manager.py`

    Edit `sensor_recorder_unsync.py` to listen to the below list of topics.
    This needs to narrowed down a bit:
    - sensor_gyro
    - sensor_accel
    - sensor_mag
    - sensor_baro
    - sensor_gps
    - vehicle_angular_velocity
    - vehicle_acceleration
    - vehicle_attitude
    - vehicle_local_position
    - vehicle_global_position
    - actuator_outputs
    - actuator_controls

    *Simulation and Data Collection Management*

    Since it is a one-off deal, there isn't any necessity to set up an
    auto-start, kill and relaunch feature. Manual start and kill is sufficient.

    Write a bash script that, once the simulation in HITL is launched, launches
    above nodes in correct sequence. It should then:
    ~ Ready drone 
    ~ Start data recording
    ~ Trigger fault at fixed time
       -- Put a tag in data collection when fault is triggered
    ~ Stop recording when the drone leaves the boundaries
       -- Also apply a tag when the drone switches from /acceptable/ to
          /unacceptable/ to /failure/
    ~ Dump records to `.csv`
    ~ Reset all applied faults prepare for reset
    ~ Rince and repeat for next fault

** ( ) #RESEARCH Tasks
*** ( ) Is it possible to automate ROS node generation
*** ( ) Rule-Based Decision Engine

** (-) Try dumping the fault data as {https://github.com/foxglove/mcap}[MCAP]

   Tested out the process. Currently there is an issue in reading the file and
   converting it from `.mcap` to `.csv` or other human readable format.
   Currently talking with Moamen for that.

** (-) Dronsole groundwork
*** (-) Continue discussion with Miika to properly understand the redeployment procedure
*** (-) Test out method suggested by Ilkka to run `kubectl` commands directly
*** ( ) Test the DataHub method for obtaining data
**** ( ) Syncup with Moamen as well
*** ( ) Syncup with Ilkka for the swarm NATS implementation

** (-) Plan for Fault Injector Interface

   ===
___

* Journal

  To seems that we will be going with Carlos for the new addition to the team.
  Martin asked for my opinion on this matter. I was kind of caught off guard. I
  told him it was between Carlos and Harshit, and Martin felt Carlos was the
  way forward.

  ===
___

* Meetings

** Interview: David Esteban Imbajoa Ruiz

*** Attendees

    | David Esteban Imajoa Ruiz
    | Martin Andreoni
    | Willian Lunardi
    | Junior Sundar

*** Goals

    - Interview

*** Agenda

    - (x) Listen to candidate
    - (x) Ask questions

*** Minutes

    - What aspect of robotics are you comfortable with:
       -- Hardware or Software
    - Extent of ROS knowledge (ROS 1/ROS 2)
    - Drone experience:
       -- Controller side
       -- Hardware
       -- Taking it from setup to flight
    - Simulation work
       -- High-level work or was there some custom work. Programming custom
          behaviour, etc.

    - Not much experience with drones, quadcopters and UAVs
    - Limited experience with ROS. Has worked with ROS 2 but evidence shows that it is rudimentary.
    - Background leans more towards algorithm and software development in robotics (Computer vision, Reinforcement Learning, Neural Network)
    - Shows some experience with Simulation. Did not explain the entent of his experience that well.
    - Has difficulty communicating and expression thoughts clearly

    - Cybersecurity background
    - Panda robotic arm (grasp and move tasks with Reinforcement Learning)
    - Primarily prefers C++ > Python > C#
    - Considers himself more towards research side

*** Action Items

    ===
___

{:$/journal/2024/03/04:}[< previous] - {:$/journal/index:}[index] - {:$/journal/2024/03/06:}[next >]
